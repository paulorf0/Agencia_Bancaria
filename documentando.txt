- 12/04
    *Criação apenas das classes e enums que vão ser utilizadas.
    * O enum CanalTransferencia serve para especificar como foi feito a transferencia, conforme descrito
    no item 'o' do .docx.
    * Não foi adicionados os métodos SET/GETTERS ainda.
    * Não foi adicionados os métodos de cada classe.    
    * Não foi feito a relação de cada classe.
- 14/04
    * Posteriormente, entender o que fazer com o "cliente" e a "data" dentro do construtor da classe Transação.
    * Implementado método especificado em 3, item j.
    * Feito o número 2. Classe para validação na pasta outros/validarCPF.java
    * Relacionado ao número 3, implementado a, b, c, e, f, g, h, i, j, k
    * Número 5, item a, feito.
- 16/04
    * implementação do item 4 iniciada, falta testar.
- 17/04
    * Adicionando exceção de: Saldo inválido (Seja por saque, depósito ou transferência).
    * No enum SaldoCode foi colocado códigos para cada tipo de exceção (Talvez não seja necessário).
    * Se for lançar um exception com msg personalizada, note que, por exemplo,
     "valor.compareTo(BigDecimal.ZERO) > 0 && valor.compareTo(this.saldo) <= 0" lança a mesma msg, mesmo que
     o saldo seja <= 0 em vez do valor de saque seja negativo.
    * A classe Transacao foi criada e as transações vão ser armazenadas em um List (histórico de transações) da conta.
    * Cada método de deposito, saque, e etc, foi adicionado um argumento a mais do tipo Canal, que diz qual foi o canal
      utilizado para realizar aquela operação. Esse canal é salvo no histórico de transações como atributo do objeto do tipo
      Transacao.
    * Dois novos métodos foram adicionados: deposito_transf(int nro_conta, BigDecimal valor, Canal canal) e
      deposito_pagamento(int nro_conta, BigDecimal valor, Canal canal). Cada um deles é utilizado para quando é feito 
      um pagamento ou transferência. Foi criado esses métodos para que se possa adicionar uma transação com o TipoTransacao
      correto.
- 21/04
    * Adicionado o campo nro_agencia na classe conta
    * Criado uma classe chamada MetodosDB que fornecem métodos para a manipulação do arquivo binário
        *retorna senha
        *retorna a conta inteira
        *salva uma conta nova ou as modificações feitas em uma conta (Não precisa se preocupar, pois no método vou verificar se é para salvar ou modificar)
    * O arquivo binário está salvo como cpf ; nome ; senha ; nro_conta ; saldo ; data_abertura; ult_movimentacao ; tipoConta ; agencia ; .. ; ..*, os ultimos dois campos depende do tipo de conta
    e o "*" demarca fim da informação
    * Nota ToDO: Adicionar na inicialização do programa o código
     try (FileOutputStream fos = new FileOutputStream(dbNome, true)) {
        } catch (IOException e) {
        }
        para que se possa inicializar o "banco de dados" caso ele não exista.
- 22/04
    * Implementado menu de funcionario e gerente
    * Modelo de salvamento no banco de dados foi separado em dois tipos: modelo para contar e modelo para funcionarios. 
    * Modelo para contas:
        cpf ; nome ; senha ; nro_conta ; saldo ; data_abertura; ult_movimentacao ; tipoConta ; agencia ; .., .., ..: .., .., .. ;.. ; ..*

        Depois de "agencia" vem uma lista de transicao, e os ultimos 2 (ou o ultimo) serão as informações especifica de um tipo de conta.
    * Modelo para funcionarios:
        cpf ; nome ; senha ; rg ; data_nasc ; estado_civil ; cidade ; tipoConta ; estado ; bairro ; nro_casa ; nro_cart ;
         cargo ; nro_agencia ; sexo ; salario ; ano_ingresso ; .. ; ... ;*
         
         Se for gerente, pode conter mais informações depois de ano_ingresso, que são:

         data_ing_gerente ; comissao ; .. , ..., ..*

         O que vem depois de comissao são os cursos.
    * TODO - Talvez o método rendimento deve ser alterado para: 
        1. Retire uma certa quantidade de dinheiro
        2. Faça-o render a tantos % de juros por mês
        - E colocar um método a mais para resgatar esse rendimento.
    * TODO - Fazer um menu de cadastro de funcionario
    * TODO - Alterar funções da classe MetodoDB para trabalhar corretamente com os novos formatados dos dados.
    * TODO - Dar um significado util para a classe Agencia. Ela não está sendo usada. Talvez fazer uma opção de "buscar agencia proxima", fazendo um filtro de agencias 
        do cliente que estão proximas do endereço dele. Como esse filtro seria complicado, talvez apenas exibir todas as agencias, assim existe um significado util para agencias.
    * TODO - Cadastrar as agencias no arquivo de dados.
        Modelo:
        . ; nome ; cidade ; bairro ; estado ; nro_local ; . ; tipoConta ; nro_agencia*

        O "." vai ser utilizado apenas para gastar espaço. tipoConta = 5 para agencias.
    * Valores dos tipos de conta:
        TipoConta      Demarca
            0         Corrente 
            1         Poupanca
            2         Salario
            3         Funcionario
            4         Gerente
            5         Agencia
- 23/04
    * Implementado salvamento de transacoes